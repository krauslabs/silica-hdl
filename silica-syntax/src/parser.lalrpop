
use crate::{ast::*, BytePos, lexer::{InvalidCharacterError, Token}};

grammar;

pub SourceFile: Ast = {
    "top" <top:Mod> => Ast { top },
};

Mod: Mod = {
    "mod" <name:Ident> "(" <ports:Ports> ")" "{" <stmts:Stmt*> "}" => Mod { name, ports, stmts },
};

Ports: Vec<Port> = Comma<Port>;

Port: Port = {
    "in" <name:Ident> <ty:TypeAscription> => Port { dir: Dir::Input, name, ty },
    "out" <name:Ident> <ty:TypeAscription> => Port { dir: Dir::Output, name, ty },
};

TypeAscription: Type = {
    ":" <ty:Type> => ty,
}

Type: Type = {
    "bit" => Type::Bit,
};

// Statements

Stmt: Stmt = {
    <id:Ident> "=" <ex:Expr> ";" => Stmt::Assign { id, ex },
    "let" <id:Ident> <ty:TypeAscription> ";" => Stmt::Declare { id, ty },
    "let" <id:Ident> <ty:TypeAscription> "=" <ex:Expr> ";" => Stmt::DeclareAssign { id, ty, ex },
};

// Expressions

Expr: Expr = ExprBitOr;

ExprBitOr: Expr = {
    <lex:ExprBitOr> "|" <rex:ExprBitXor> => Expr::Binary { lex: Box::new(lex), op: BinaryOp::BitOr, rex: Box::new(rex) },
    ExprBitXor,
};

ExprBitXor: Expr = {
    <lex:ExprBitXor> "^" <rex:ExprBitAnd> => Expr::Binary { lex: Box::new(lex), op: BinaryOp::BitXor, rex: Box::new(rex) },
    ExprBitAnd,
};

ExprBitAnd: Expr = {
    <lex:ExprBitAnd> "&" <rex:ExprShift> => Expr::Binary { lex: Box::new(lex), op: BinaryOp::BitAnd, rex: Box::new(rex) },
    ExprShift,
};

ExprShift: Expr = {
    <lex:ExprShift> "<<" <rex:ExprUnary> => Expr::Binary { lex: Box::new(lex), op: BinaryOp::ShiftLeft, rex: Box::new(rex) },
    <lex:ExprShift> ">>" <rex:ExprUnary> => Expr::Binary { lex: Box::new(lex), op: BinaryOp::ShiftRight, rex: Box::new(rex) },
    ExprUnary,
};

ExprUnary: Expr = {
    "~" <ex:ExprUnary> => Expr::Unary { op: UnaryOp::Negate, ex: Box::new(ex) },
    "&" <ex:ExprUnary> => Expr::Unary { op: UnaryOp::ReductAnd, ex: Box::new(ex) },
    "^" <ex:ExprUnary> => Expr::Unary { op: UnaryOp::ReductXor, ex: Box::new(ex) },
    "|" <ex:ExprUnary> => Expr::Unary { op: UnaryOp::ReductOr, ex: Box::new(ex) },
    ExprTerm,
};

ExprTerm: Expr = {
    "(" <ex:Expr> ")" => Expr::Paren { ex: Box::new(ex) },
    <id:Ident> => Expr::Ident { id },
    <val:Litrl> => Expr::Litrl { val },
};

// Other Terminals

Ident: String = {
    "ident" => <>.to_string(),
};

Litrl: String = {
    "litrl" => <>.to_string(),
};

// Helper Macros

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Custom Lexer

extern {
    type Location = BytePos;
    type Error = InvalidCharacterError;

    enum Token {
        // Identifiers
        "ident" => Token::Ident(<String>),

        // Literals
        "litrl" => Token::Litrl(<String>),

        // Punctuation
        "," => Token::Comma,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "{" => Token::LeftCurlyBrace,
        "}" => Token::RightCurlyBrace,
        "[" => Token::LeftSquareBrace,
        "]" => Token::RightSquareBrace,

        // Operators
        "=" => Token::Assign,
        "~" => Token::Negate,
        "&" => Token::BitAnd,
        "|" => Token::BitOr,
        "^" => Token::BitXor,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,

        // Keywords
        "mod" => Token::Mod,
        "top" => Token::Top,
        "in" => Token::In,
        "out" => Token::Out,
        "bit" => Token::Bit,
        "let" => Token::Let,
    }
}